test$AUCinf_pred <- abs(as.numeric(as.character(test$AUClast)) +
test$Clast_hat/test$Lambda)
test$AUMCinf_pred <- abs(as.numeric(as.character(test$AUMClast)) +
test$Clast_hatc/test$Lambdac)
test$MRTlast <- test$AUMClast/test$AUClast
test$MRTobs <- test$AUMCinf_obs/test$AUCinf_obs
test$MRTpred <- test$AUMCinf_pred/test$AUCinf_pred
}  else {
test$MRTlast <- test$AUMClast/test$AUClast
}
if (!is.null(Cpart)) {
test <- plyr::join(test, Cpart)
}
if (!is.null(aucpart)) {
test <- plyr::join(test, aucpart)
}
test$interc <- test$that <- NULL
no_keep<-c("Clastc","AUMClast","Lambda","R2","n_lambda","R2c","HLc","thatc","n_lambdac","Clast_hatc",
"AUMCinf_obs","AUCinf_pred","AUMCinf_pred","intercc","Lambdac")
if(!full){
test<-test[,!names(test)%in%no_keep]
}else{
test<-test
}
test
}
nca.cal(data=d,partialAUC =c(0,12,12,24),
partialConc =c(1,5),time = "time",
dv = "conc")
nca.cal<-function (data, n_lambda = 3, id = "id", time = "time",
dv = "dv", partialAUC =NULL, partialConc =NULL,full=F)
{
library(plyr)
dat1<-data
dat1$id<-dat1[,id]
dat1$time<-dat1[,time]
dat1<-dat1[order(dat1$id,dat1$time),]
dat1<-dplyr::left_join(dat1,lhmutate(nodup(dat1[,c("id","time")],"id","all"),"time=fdt"))
dat1$tad<-dat1$time-dat1$fdt;dat1$fdt<-NULL
dat1$dv<-dat1[,dv]
#dat1$dose<-dat1[,dose]
dat1$uid<-dat1[,id]
dat1$tad[dat1$tad < 0] <- 0
dat2 <- dat1
dat2 <- dat2[order(dat2[,id], dat2$tad), ]
dat2$dvtm <- dat2[,dv] * dat2[,time]
datauc <- dat2
auclast <- AUC(datauc, time ="tad", id ="id", dv ="dv")
names(auclast) <- c(id, "AUClast")
aucmlast <- AUC(datauc, time ="tad", id ="id", dv = "dvtm")
names(aucmlast) <- c(id, "AUMClast")
dat2$tad1 <- dat2$tad
aucpart <- NULL
if (!is.null(partialAUC)) {
nauc <- length(partialAUC)/2
for (z in seq(1, length(partialAUC), 2)) {
tm1 <- partialAUC[z]
tm2 <- partialAUC[z + 1]
auc <- AUC(dat2[dat2[, "tad1"] >= tm1 & dat2[, "tad1"] <=
tm2, ], time = "tad1", id = id, dv = dv)
names(auc) <- c(id, paste0("AUC", tm1, "-", tm2))
if (z == 1) {
aucpart <- rbind(aucpart, auc)
}      else {
aucpart[, paste0("AUC", tm1, "-", tm2)] <- auc[,
2]
}
}
aucpart
}  else {
aucpart <- NULL
}
Cpart <- NULL
if (!is.null(partialConc)) {
nauc <- length(partialConc)
for (z in 1:length(partialConc)) {
tm1 <- partialConc[z]
partc <- dat2[dat2[, "tad1"] == tm1, c(id, dv)]
names(partc) <- c(id, paste0("C", tm1))
if (z == 1) {
Cpart <- rbind(Cpart, partc)
}      else {
Cpart<-dplyr::left_join(Cpart, partc)
}
}
} else {
Cpart <- NULL
}
#Derive Lambda and HL
if (!is.null(n_lambda)) {
dat3<-dat2
dat3$time <- dat3$tad
dat3$tmp <- seq(nrow(dat3))
dat3 <- addvar(dat3, "id", "tmp", "max(x)", "yes", "tmp2")
head(dat3)
dat3$tmp <- dat3$tmp2 - dat3$tmp
dat3 <- dat3[dat3$tmp < n_lambda, ]
test1 <- ddply(dat3[, c("id", "time", "dv")], .(id),
summarize, interc = lm(log(dv) ~ time)$coef[1], Lambda = lm(log(dv) ~
time)$coef[2] * -1, R2 = summary(lm(log(dv) ~
time))$r.squared, HL = (log(2)/lm(log(dv) ~ time)$coef[2]) *
-1, that = max(time))
test1$n_lambda <- n_lambda
test1$Clast_hat <- with(test1, exp(-Lambda * that + interc))
head(dat3)
test1a <- ddply(dat3[, c("id", "time", "dv","dvtm")], .(id),
summarize, intercc = lm(log(dvtm) ~ time)$coef[1],
Lambdac = lm(log(dvtm) ~ time)$coef[2] * -1, R2c = summary(lm(log(dvtm) ~
time))$r.squared, HLc = (log(2)/lm(log(dvtm) ~
time)$coef[2]) * -1, thatc = max(time))
test1a$n_lambdac <- n_lambda
test1a$Clast_hatc <- with(test1a, exp(-Lambdac * thatc +
intercc))
}  else {
test1 <- NULL
}
if (TRUE %in% c(test1$HL < 0)) {
test1$Warning.HL.Negative = ifelse(test1$HL, "yes", "")
}
dat2$time1 <- dat2$time
#min(dat2$dv[dat2$time >= dat2$time[dat2$dv == max(dat2$dv)]])
#time[dv == max(dv)]
max <- addvar(dat2,"id","dv","min(x)","yes","Cmin")
max<-left_join(max,addvar(dat2,"id","dv","max(x)","no","Cmax"))
max<-left_join(max,addvar(dat2,"id","time1","max(x)","no","Tlast"))
clast<-max[max$time1==max$Tlast,c(id,dv)];names(clast)[2]<-"Clast"
max<-lhmutate(max[max[,dv]==max$Cmax,c(id,"time1","Cmin","Cmax","Tlast")],"time1=Tmax")
max<-left_join(max,clast)
# ddply(dat2[, c("uid", "dv", "time", "time1")], .(uid),
#            summarize, Cmax = max(dv), Tmax = time1[dv == max(dv)],
#            Cmin = min(dv), Tlast = max(time1),
#            Clast = dv[time == max(time)])
maxa <- ddply(dat2, .(id), summarize, Clastc = dvtm[time ==
max(time)])
head(dat1)
#test <- plyr::join(max, idss)
test <- plyr::join(max, maxa)
test <- plyr::join(test, auclast)
test <- plyr::join(test, aucmlast)
#Derive lambda dependent parameters
if (!is.null(n_lambda)) {
test <- join(test, test1)
test <- join(test, test1a)
test$AUCinf_obs <- abs(as.numeric(as.character(test$AUClast)) +
test$Clast/test$Lambda)
test$AUMCinf_obs <- abs(as.numeric(as.character(test$AUMClast)) +
test$Clastc/test$Lambdac)
test$AUCinf_pred <- abs(as.numeric(as.character(test$AUClast)) +
test$Clast_hat/test$Lambda)
test$AUMCinf_pred <- abs(as.numeric(as.character(test$AUMClast)) +
test$Clast_hatc/test$Lambdac)
test$MRTlast <- test$AUMClast/test$AUClast
test$MRTobs <- test$AUMCinf_obs/test$AUCinf_obs
test$MRTpred <- test$AUMCinf_pred/test$AUCinf_pred
}  else {
test$MRTlast <- test$AUMClast/test$AUClast
}
if (!is.null(Cpart)) {
test <- plyr::join(test, Cpart)
}
if (!is.null(aucpart)) {
test <- plyr::join(test, aucpart)
}
test$interc <- test$that <- NULL
no_keep<-c("Clastc","AUMClast","Lambda","R2","n_lambda","R2c","HLc","thatc","n_lambdac","Clast_hatc",
"AUMCinf_obs","AUCinf_pred","AUMCinf_pred","intercc","Lambdac")
if(!full){
test<-test[,!names(test)%in%no_keep]
}else{
test<-test
}
test
}
nca.cal(data=d,partialAUC =c(0,12,12,24),
partialConc =c(1,5),time = "time",
dv = "conc")
pla<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line()+scale_y_log10()
pla
pla<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line(aes(col=factor(id)))+scale_y_log10()
pla
plb<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line(aes(col=factor(id)))
plb
pla<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line(aes(col=factor(id)))+scale_y_log10()+theme_bw()
plb<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line(aes(col=factor(id)))+theme_bw()
pla
plb
library(lhplot)
lh_gof
plot<-ggpubr::ggarrange(plb,pla,ncol = 2, nrow = 2, common.legend = TRUE, legend = "bottom")
plot
plot<-ggpubr::ggarrange(plb,pla,ncol = 2, nrow =1 , common.legend = TRUE, legend = "bottom")
plot
nca.cal<-function (data, n_lambda = 3, id = "id", time = "time",
dv = "dv", partialAUC =NULL, partialConc =NULL,full=F)
{
library(plyr)
library(ggplot2)
dat1<-data
dat1$id<-dat1[,id]
dat1$time<-dat1[,time]
dat1<-dat1[order(dat1$id,dat1$time),]
dat1<-dplyr::left_join(dat1,lhmutate(nodup(dat1[,c("id","time")],"id","all"),"time=fdt"))
dat1$tad<-dat1$time-dat1$fdt;dat1$fdt<-NULL
dat1$dv<-dat1[,dv]
#dat1$dose<-dat1[,dose]
dat1$uid<-dat1[,id]
dat1$tad[dat1$tad < 0] <- 0
dat2 <- dat1
dat2 <- dat2[order(dat2[,id], dat2$tad), ]
dat2$dvtm <- dat2[,dv] * dat2[,time]
pla<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line(aes(col=factor(id)))+scale_y_log10()+theme_bw()
plb<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line(aes(col=factor(id)))+theme_bw()
plot<-ggpubr::ggarrange(plb,pla,ncol = 2, nrow =1 , common.legend = TRUE, legend = "bottom")
print(plot)
datauc <- dat2
auclast <- AUC(datauc, time ="tad", id ="id", dv ="dv")
names(auclast) <- c(id, "AUClast")
aucmlast <- AUC(datauc, time ="tad", id ="id", dv = "dvtm")
names(aucmlast) <- c(id, "AUMClast")
dat2$tad1 <- dat2$tad
aucpart <- NULL
if (!is.null(partialAUC)) {
nauc <- length(partialAUC)/2
for (z in seq(1, length(partialAUC), 2)) {
tm1 <- partialAUC[z]
tm2 <- partialAUC[z + 1]
auc <- AUC(dat2[dat2[, "tad1"] >= tm1 & dat2[, "tad1"] <=
tm2, ], time = "tad1", id = id, dv = dv)
names(auc) <- c(id, paste0("AUC", tm1, "-", tm2))
if (z == 1) {
aucpart <- rbind(aucpart, auc)
}      else {
aucpart[, paste0("AUC", tm1, "-", tm2)] <- auc[,
2]
}
}
aucpart
}  else {
aucpart <- NULL
}
Cpart <- NULL
if (!is.null(partialConc)) {
nauc <- length(partialConc)
for (z in 1:length(partialConc)) {
tm1 <- partialConc[z]
partc <- dat2[dat2[, "tad1"] == tm1, c(id, dv)]
names(partc) <- c(id, paste0("C", tm1))
if (z == 1) {
Cpart <- rbind(Cpart, partc)
}      else {
Cpart<-dplyr::left_join(Cpart, partc)
}
}
} else {
Cpart <- NULL
}
#Derive Lambda and HL
if (!is.null(n_lambda)) {
dat3<-dat2
dat3$time <- dat3$tad
dat3$tmp <- seq(nrow(dat3))
dat3 <- addvar(dat3, "id", "tmp", "max(x)", "yes", "tmp2")
head(dat3)
dat3$tmp <- dat3$tmp2 - dat3$tmp
dat3 <- dat3[dat3$tmp < n_lambda, ]
test1 <- ddply(dat3[, c("id", "time", "dv")], .(id),
summarize, interc = lm(log(dv) ~ time)$coef[1], Lambda = lm(log(dv) ~
time)$coef[2] * -1, R2 = summary(lm(log(dv) ~
time))$r.squared, HL = (log(2)/lm(log(dv) ~ time)$coef[2]) *
-1, that = max(time))
test1$n_lambda <- n_lambda
test1$Clast_hat <- with(test1, exp(-Lambda * that + interc))
head(dat3)
test1a <- ddply(dat3[, c("id", "time", "dv","dvtm")], .(id),
summarize, intercc = lm(log(dvtm) ~ time)$coef[1],
Lambdac = lm(log(dvtm) ~ time)$coef[2] * -1, R2c = summary(lm(log(dvtm) ~
time))$r.squared, HLc = (log(2)/lm(log(dvtm) ~
time)$coef[2]) * -1, thatc = max(time))
test1a$n_lambdac <- n_lambda
test1a$Clast_hatc <- with(test1a, exp(-Lambdac * thatc +
intercc))
}  else {
test1 <- NULL
}
if (TRUE %in% c(test1$HL < 0)) {
test1$Warning.HL.Negative = ifelse(test1$HL, "yes", "")
}
dat2$time1 <- dat2$time
#min(dat2$dv[dat2$time >= dat2$time[dat2$dv == max(dat2$dv)]])
#time[dv == max(dv)]
max <- addvar(dat2,"id","dv","min(x)","yes","Cmin")
max<-left_join(max,addvar(dat2,"id","dv","max(x)","no","Cmax"))
max<-left_join(max,addvar(dat2,"id","time1","max(x)","no","Tlast"))
clast<-max[max$time1==max$Tlast,c(id,dv)];names(clast)[2]<-"Clast"
max<-lhmutate(max[max[,dv]==max$Cmax,c(id,"time1","Cmin","Cmax","Tlast")],"time1=Tmax")
max<-left_join(max,clast)
# ddply(dat2[, c("uid", "dv", "time", "time1")], .(uid),
#            summarize, Cmax = max(dv), Tmax = time1[dv == max(dv)],
#            Cmin = min(dv), Tlast = max(time1),
#            Clast = dv[time == max(time)])
maxa <- ddply(dat2, .(id), summarize, Clastc = dvtm[time ==
max(time)])
head(dat1)
#test <- plyr::join(max, idss)
test <- plyr::join(max, maxa)
test <- plyr::join(test, auclast)
test <- plyr::join(test, aucmlast)
#Derive lambda dependent parameters
if (!is.null(n_lambda)) {
test <- join(test, test1)
test <- join(test, test1a)
test$AUCinf_obs <- abs(as.numeric(as.character(test$AUClast)) +
test$Clast/test$Lambda)
test$AUMCinf_obs <- abs(as.numeric(as.character(test$AUMClast)) +
test$Clastc/test$Lambdac)
test$AUCinf_pred <- abs(as.numeric(as.character(test$AUClast)) +
test$Clast_hat/test$Lambda)
test$AUMCinf_pred <- abs(as.numeric(as.character(test$AUMClast)) +
test$Clast_hatc/test$Lambdac)
test$MRTlast <- test$AUMClast/test$AUClast
test$MRTobs <- test$AUMCinf_obs/test$AUCinf_obs
test$MRTpred <- test$AUMCinf_pred/test$AUCinf_pred
}  else {
test$MRTlast <- test$AUMClast/test$AUClast
}
if (!is.null(Cpart)) {
test <- plyr::join(test, Cpart)
}
if (!is.null(aucpart)) {
test <- plyr::join(test, aucpart)
}
test$interc <- test$that <- NULL
no_keep<-c("Clastc","AUMClast","Lambda","R2","n_lambda","R2c","HLc","thatc","n_lambdac","Clast_hatc",
"AUMCinf_obs","AUCinf_pred","AUMCinf_pred","intercc","Lambdac")
if(!full){
test<-test[,!names(test)%in%no_keep]
}else{
test<-test
}
test
}
nca.cal(data=d,partialAUC =c(0,12,12,24),
partialConc =c(1,5),time = "time",
dv = "conc")
dev.off()
nca.cal(data=d,partialAUC =c(0,12,12,24),
partialConc =c(1,5),time = "time",
dv = "conc")
plot
pla
nca.cal<-function (data, n_lambda = 3, id = "id", time = "time",
dv = "dv", partialAUC =NULL, partialConc =NULL,full=F)
{
library(plyr)
library(ggplot2)
dat1<-data
dat1$id<-dat1[,id]
dat1$time<-dat1[,time]
dat1<-dat1[order(dat1$id,dat1$time),]
dat1<-dplyr::left_join(dat1,lhmutate(nodup(dat1[,c("id","time")],"id","all"),"time=fdt"))
dat1$tad<-dat1$time-dat1$fdt;dat1$fdt<-NULL
dat1$dv<-dat1[,dv]
#dat1$dose<-dat1[,dose]
dat1$uid<-dat1[,id]
dat1$tad[dat1$tad < 0] <- 0
dat2 <- dat1
dat2 <- dat2[order(dat2[,id], dat2$tad), ]
dat2$dvtm <- dat2[,dv] * dat2[,time]
plog<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line(aes(col=factor(id)))+scale_y_log10()+theme_bw()
plin<-ggplot(d,aes(x=time,y=conc,group=factor(id)))+
geom_line(aes(col=factor(id)))+theme_bw()
ploglin<-ggpubr::ggarrange(plin,plog,ncol = 2, nrow =1 , common.legend = TRUE, legend = "bottom")
print(ploglin)
datauc <- dat2
auclast <- AUC(datauc, time ="tad", id ="id", dv ="dv")
names(auclast) <- c(id, "AUClast")
aucmlast <- AUC(datauc, time ="tad", id ="id", dv = "dvtm")
names(aucmlast) <- c(id, "AUMClast")
dat2$tad1 <- dat2$tad
aucpart <- NULL
if (!is.null(partialAUC)) {
nauc <- length(partialAUC)/2
for (z in seq(1, length(partialAUC), 2)) {
tm1 <- partialAUC[z]
tm2 <- partialAUC[z + 1]
auc <- AUC(dat2[dat2[, "tad1"] >= tm1 & dat2[, "tad1"] <=
tm2, ], time = "tad1", id = id, dv = dv)
names(auc) <- c(id, paste0("AUC", tm1, "-", tm2))
if (z == 1) {
aucpart <- rbind(aucpart, auc)
}      else {
aucpart[, paste0("AUC", tm1, "-", tm2)] <- auc[,
2]
}
}
aucpart
}  else {
aucpart <- NULL
}
Cpart <- NULL
if (!is.null(partialConc)) {
nauc <- length(partialConc)
for (z in 1:length(partialConc)) {
tm1 <- partialConc[z]
partc <- dat2[dat2[, "tad1"] == tm1, c(id, dv)]
names(partc) <- c(id, paste0("C", tm1))
if (z == 1) {
Cpart <- rbind(Cpart, partc)
}      else {
Cpart<-dplyr::left_join(Cpart, partc)
}
}
} else {
Cpart <- NULL
}
#Derive Lambda and HL
if (!is.null(n_lambda)) {
dat3<-dat2
dat3$time <- dat3$tad
dat3$tmp <- seq(nrow(dat3))
dat3 <- addvar(dat3, "id", "tmp", "max(x)", "yes", "tmp2")
head(dat3)
dat3$tmp <- dat3$tmp2 - dat3$tmp
dat3 <- dat3[dat3$tmp < n_lambda, ]
test1 <- ddply(dat3[, c("id", "time", "dv")], .(id),
summarize, interc = lm(log(dv) ~ time)$coef[1], Lambda = lm(log(dv) ~
time)$coef[2] * -1, R2 = summary(lm(log(dv) ~
time))$r.squared, HL = (log(2)/lm(log(dv) ~ time)$coef[2]) *
-1, that = max(time))
test1$n_lambda <- n_lambda
test1$Clast_hat <- with(test1, exp(-Lambda * that + interc))
head(dat3)
test1a <- ddply(dat3[, c("id", "time", "dv","dvtm")], .(id),
summarize, intercc = lm(log(dvtm) ~ time)$coef[1],
Lambdac = lm(log(dvtm) ~ time)$coef[2] * -1, R2c = summary(lm(log(dvtm) ~
time))$r.squared, HLc = (log(2)/lm(log(dvtm) ~
time)$coef[2]) * -1, thatc = max(time))
test1a$n_lambdac <- n_lambda
test1a$Clast_hatc <- with(test1a, exp(-Lambdac * thatc +
intercc))
}  else {
test1 <- NULL
}
if (TRUE %in% c(test1$HL < 0)) {
test1$Warning.HL.Negative = ifelse(test1$HL, "yes", "")
}
dat2$time1 <- dat2$time
#min(dat2$dv[dat2$time >= dat2$time[dat2$dv == max(dat2$dv)]])
#time[dv == max(dv)]
max <- addvar(dat2,"id","dv","min(x)","yes","Cmin")
max<-left_join(max,addvar(dat2,"id","dv","max(x)","no","Cmax"))
max<-left_join(max,addvar(dat2,"id","time1","max(x)","no","Tlast"))
clast<-max[max$time1==max$Tlast,c(id,dv)];names(clast)[2]<-"Clast"
max<-lhmutate(max[max[,dv]==max$Cmax,c(id,"time1","Cmin","Cmax","Tlast")],"time1=Tmax")
max<-left_join(max,clast)
# ddply(dat2[, c("uid", "dv", "time", "time1")], .(uid),
#            summarize, Cmax = max(dv), Tmax = time1[dv == max(dv)],
#            Cmin = min(dv), Tlast = max(time1),
#            Clast = dv[time == max(time)])
maxa <- ddply(dat2, .(id), summarize, Clastc = dvtm[time ==
max(time)])
head(dat1)
#test <- plyr::join(max, idss)
test <- plyr::join(max, maxa)
test <- plyr::join(test, auclast)
test <- plyr::join(test, aucmlast)
#Derive lambda dependent parameters
if (!is.null(n_lambda)) {
test <- join(test, test1)
test <- join(test, test1a)
test$AUCinf_obs <- abs(as.numeric(as.character(test$AUClast)) +
test$Clast/test$Lambda)
test$AUMCinf_obs <- abs(as.numeric(as.character(test$AUMClast)) +
test$Clastc/test$Lambdac)
test$AUCinf_pred <- abs(as.numeric(as.character(test$AUClast)) +
test$Clast_hat/test$Lambda)
test$AUMCinf_pred <- abs(as.numeric(as.character(test$AUMClast)) +
test$Clast_hatc/test$Lambdac)
test$MRTlast <- test$AUMClast/test$AUClast
test$MRTobs <- test$AUMCinf_obs/test$AUCinf_obs
test$MRTpred <- test$AUMCinf_pred/test$AUCinf_pred
}  else {
test$MRTlast <- test$AUMClast/test$AUClast
}
if (!is.null(Cpart)) {
test <- plyr::join(test, Cpart)
}
if (!is.null(aucpart)) {
test <- plyr::join(test, aucpart)
}
test$interc <- test$that <- NULL
no_keep<-c("Clastc","AUMClast","Lambda","R2","n_lambda","R2c","HLc","thatc","n_lambdac","Clast_hatc",
"AUMCinf_obs","AUCinf_pred","AUMCinf_pred","intercc","Lambdac")
if(!full){
test<-test[,!names(test)%in%no_keep]
}else{
test<-test
}
test
}
nca.cal(data=d,partialAUC =c(0,12,12,24),
partialConc =c(1,2),time = "time",
dv = "conc")
devtools::document("C:/Users/lpheng/Desktop/packdev/lhtool2")
